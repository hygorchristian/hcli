const { test, trait, before, after } = use('Test/Suite')('<%= props.classNames.model%>')

const User = use('App/Models/User')
const <%= props.classNames.model%> = use('App/Models/<%= props.classNames.model%>')

trait('Test/ApiClient')
trait('Auth/Client')

const mock = {
  user: {
    email: 'teste@teste.com',
    username: 'tester',
    password: '123456',
  },
}

before(async () => {
  await User.create(mock.user)

  for (let i = 0; i < 5; i++) {
    await <%= props.classNames.model%>.create({<% for(var i=0; i < props.fields.length; i++) { %>
      <%- props.fields[i].createData %>,<% } %>
    })
  }
})

after(async () => {
  const user = await User.findByOrFail('email', mock.user.email)
  await user.delete()
})

test('Create <%= props.names.single%>', async ({ client }) => {
  const user = await User.findByOrFail('email', mock.user.email)
  const data = {<% for(var i=0; i < props.fields.length; i++) { %>
    <%= props.fields[i].field %>: <%- props.fields[i].test %>,<% } %>
  }

  const response = await client
    .post('/<%= props.names.plural%>')
    .send(data)
    .loginVia(user, 'jwt')
    .end()

  response.assertStatus(200)
  response.assertJSONSubset({<% for(var i=0; i < props.fields.length; i++) { %>
    <%= props.fields[i].field %>: <%- props.fields[i].test %>,<% } %>
  })
})

test('Get one <%= props.names.single%>', async ({ client }) => {
  const response = await client
    .get('/<%= props.names.plural%>/2')
    .end()

  response.assertStatus(200)
})

test('Get all <%= props.names.single%>s', async ({ client }) => {
  const response = await client
    .get('/<%= props.names.plural%>')
    .end()

  response.assertStatus(200)

  response.assertJSONSubset({
    data: [{<% for(var i=0; i < props.fields.length; i++) { %>
      <%- props.fields[i].createData %>,<% } %>
    }]
  })
})

test('Update <%= props.names.single%>', async ({ client }) => {
  const user = await User.findByOrFail('email', mock.user.email)
  const data = {<% for(var i=0; i < props.fields.length; i++) { %>
    <%= props.fields[i].field %>: <%- props.fields[i].testUpdate %>,<% } %>
  }

  const response = await client
    .put(`/<%= props.names.plural%>/1`)
    .send(data)
    .loginVia(user, 'jwt')
    .end()

  response.assertStatus(200)

  response.assertJSONSubset({
    <%= props.fields[0].field %>: data.<%= props.fields[0].field %>
  })
})

test('Delete <%= props.names.single%>', async ({ client }) => {
  const user = await User.findByOrFail('email', mock.user.email)

  const response = await client
    .delete(`/<%= props.names.plural%>/1`)
    .loginVia(user, 'jwt')
    .end()

  response.assertStatus(204)
})
